import aiohttp
import logging
from typing import Any, Dict, List

# --- Import c√°c th√†nh ph·∫ßn t·ª´ core v√† utils ---
from src.data_pipeline.core.pms.pms_extractor import PMSExtractor
from src.data_pipeline.core.abstract_extractor import ExtractionResult
from src.utils.date_params import DateWindow
from src.data_pipeline.core.clients.pms_client import PMSClient

logger = logging.getLogger(__name__)

class BookingExtractor(PMSExtractor):
    """Extractor chuy√™n d·ª•ng ƒë·ªÉ l·∫•y d·ªØ li·ªáu Booking."""
    ENDPOINT = "bookings"

    def __init__(self, client: PMSClient):
        super().__init__(client=client)

    async def _perform_extraction(self, session: aiohttp.ClientSession, branch_id: int, **kwargs) -> List[Dict[str, Any]]:
        """
        Th·ª±c hi·ªán vi·ªác g·ªçi API v√† ph√¢n trang ƒë·ªÉ l·∫•y d·ªØ li·ªáu th√¥.
        L·ªõp cha (PMSExtractor) s·∫Ω truy·ªÅn `params` t·ª´ `date_window` v√†o ƒë√¢y th√¥ng qua **kwargs.
        """
        base_params: Dict[str, Any] = kwargs.get("params", {})
        if "limit" not in base_params:
            base_params["limit"] = 100
            
        logger.info(f"Performing booking extraction for branch {branch_id} with params: {base_params}")
        return await self.client.paginate_json(session, self.ENDPOINT, base_params, limit_default=100)

    async def extract_async(self, *, branch_id: int, date_window: DateWindow, **kwargs) -> ExtractionResult:
        """
        Ghi ƒë√® (override) ph∆∞∆°ng th·ª©c c·ªßa l·ªõp cha ƒë·ªÉ th√™m logging v√† truy·ªÅn date_window.
        ƒê√¢y l√† ph∆∞∆°ng th·ª©c ƒë∆∞·ª£c g·ªçi b·ªüi template method trong l·ªõp cha.
        """
        branch_name = self.TOKEN_BRANCH_MAP.get(branch_id, f"Branch {branch_id}")
        logger.info(
            f"üöÄ Starting RAW extraction for {branch_name} ({date_window.field}): "
            f"{date_window.start.strftime('%Y-%m-%d')} -> {date_window.end.strftime('%Y-%m-%d')}"
        )
        
        # T·∫°o params t·ª´ date_window ƒë·ªÉ truy·ªÅn cho _perform_extraction
        api_params = date_window.as_api_params()
        
        # G·ªçi template method c·ªßa l·ªõp cha, truy·ªÅn c√°c tham s·ªë c·∫ßn thi·∫øt v√†o kwargs.
        # L·ªõp cha s·∫Ω x·ª≠ l√Ω vi·ªác g·ªçi _perform_extraction, try/except, logging th√†nh c√¥ng/th·∫•t b·∫°i...
        return await super().extract_async(
            branch_id=branch_id,
            params=api_params, 
            update_from=date_window.start, # Truy·ªÅn th√™m th√¥ng tin n√†y ƒë·ªÉ l∆∞u v√†o ExtractionResult
            update_to=date_window.end,
            **kwargs
        )